{
  "version": 3,
  "sources": ["../../../functions/api/launch.ts", "../../../node_modules/jwt-decode/build/esm/index.js", "../../../functions/api/settings.ts", "../../../node_modules/rfc4648/lib/rfc4648.js", "../../../node_modules/@cfworker/jwt/dist/decode.js", "../../../node_modules/@cfworker/jwt/dist/algs.js", "../../../node_modules/@cfworker/jwt/dist/discovery.js", "../../../node_modules/@cfworker/jwt/dist/jwks.js", "../../../node_modules/@cfworker/jwt/dist/types.js", "../../../node_modules/@cfworker/jwt/dist/verify.js", "../../../node_modules/@cfworker/jwt/dist/parse.js", "../../../functions/api/token.ts", "functionsRoutes-0.07853943757079018.mjs", "../../../node_modules/wrangler/node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-lU2oaZ/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-lU2oaZ/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/.wrangler/tmp/pages-IVDT6h/functionsWorker-0.6149606837813042.mjs",
  "sourcesContent": ["import { Env } from \"../context-env\";\n\nconst SETTINGS_LAUNCH_TYPE = \"APP_SETTINGS\";\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  const url = new URL(context.request.url);\n  const queryParams = url.searchParams;\n  const launchId = queryParams.get(\"launch_id\");\n  const launchType = queryParams.get(\"launch_type\");\n\n  // Redirect to the settings application page if the launch type is APP_SETTINGS\n  let redirect_uri = context.env.REDIRECT_URL ?? \"http://localhost:8788\";\n  redirect_uri =\n    launchType === SETTINGS_LAUNCH_TYPE\n      ? `${redirect_uri}/settings`\n      : redirect_uri;\n\n  const redirectUrl = new URL(\n    context.env.VIM_AUTHORIZE_ENDPOINT ??\n      \"https://api.getvim.com/v1/oauth/authorize\"\n  );\n  redirectUrl.searchParams.append(\"launch_id\", launchId);\n  redirectUrl.searchParams.append(\"client_id\", context.env.CLIENT_ID);\n  redirectUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n  redirectUrl.searchParams.append(\"response_type\", \"code\");\n  return Response.redirect(redirectUrl.toString(), 302);\n};\n", "export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n", "import { Env } from \"../context-env\";\nimport { Settings } from \"../../types\";\nimport { jwtDecode } from \"jwt-decode\";\n\nconst ORGANIZATION_ID_CLAIM = \"https://getvim.com/organizationId\";\n\nconst extractOrgId = (token: string) => {\n  if (!token) {\n    return Response.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n  const decodedToken = jwtDecode<{ [key: string]: string }>(token);\n  return decodedToken?.[ORGANIZATION_ID_CLAIM];\n};\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n  const { request, env } = context;\n  const { DB } = env;\n  const token = context.request.headers.get(\"Authorization\");\n  const organizationId = extractOrgId(token);\n\n  try {\n    const data = await request.json<Settings>();\n    const { theme_color } = data;\n\n    const result = await DB.prepare(\n      \"INSERT INTO settings (organization_id, theme_color, created_at) VALUES (?, ?, ?) \\\n       ON CONFLICT (organization_id) \\\n       DO UPDATE SET \\\n       theme_color = excluded.theme_color\"\n    )\n      .bind(organizationId, theme_color, new Date().toISOString())\n      .run();\n\n    return Response.json({ success: true, id: result.meta.last_row_id });\n  } catch (error) {\n    return Response.json({ error: (error as Error).message }, { status: 500 });\n  }\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  const { env } = context;\n  const { DB } = env;\n  const token = context.request.headers.get(\"Authorization\");\n  const organizationId = extractOrgId(token);\n  try {\n    const result = await DB.prepare(\n      \"SELECT * FROM settings WHERE organization_id = ?\"\n    )\n      .bind(organizationId)\n      .first();\n\n    return Response.json(result);\n  } catch (error) {\n    return Response.json({ error: (error as Error).message }, { status: 500 });\n  }\n};\n", "/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n\n// ---------------------------------------------------------------------------\n// Specific encodings\n// ---------------------------------------------------------------------------\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse(string, opts) {\n    return _parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return _parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse(string, opts) {\n    return _parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64UrlEncoding, opts);\n  }\n};\n\n// ---------------------------------------------------------------------------\n// Codec implementation\n// ---------------------------------------------------------------------------\n\nvar codec = {\n  parse: _parse,\n  stringify: _stringify\n};\nfunction _parse(string, encoding, opts) {\n  var _opts$out;\n  if (opts === void 0) {\n    opts = {};\n  }\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  }\n\n  // The string must have a whole number of bytes:\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  }\n\n  // Count the padding bytes:\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n\n    // If we get a whole number of bytes, there is too much padding:\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  }\n\n  // Allocate the output:\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0);\n\n  // Parse the data:\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  var written = 0; // Next byte to write\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    }\n\n    // Append the bits to the buffer:\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n}\nfunction _stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts,\n    _opts$pad = _opts.pad,\n    pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n  return out;\n}\n\nexport { base16, base32, base32hex, base64, base64url, codec };\n", "import { base64url } from 'rfc4648';\nexport function decodeJwt(token) {\n    const [header, payload, signature] = token.split('.');\n    const decoder = new TextDecoder();\n    return {\n        header: JSON.parse(decoder.decode(base64url.parse(header, { loose: true }))),\n        payload: JSON.parse(decoder.decode(base64url.parse(payload, { loose: true }))),\n        signature: base64url.parse(signature, { loose: true }),\n        raw: { header, payload, signature }\n    };\n}\n", "export const algToHash = {\n    RS256: 'SHA-256',\n    RS384: 'SHA-384',\n    RS512: 'SHA-512'\n};\nexport const algs = Object.keys(algToHash);\n", "export async function getIssuerMetadata(issuer) {\n    const url = new URL(issuer);\n    if (!url.pathname.endsWith('/')) {\n        url.pathname += '/';\n    }\n    url.pathname += '.well-known/openid-configuration';\n    const response = await fetch(url.href);\n    if (!response.ok) {\n        throw new Error(`Error loading OpenID discovery document at ${url.href}. ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n}\n", "import { algToHash } from './algs.js';\nimport { getIssuerMetadata } from './discovery.js';\nexport async function getJwks(issuer) {\n    const issuerMetadata = await getIssuerMetadata(issuer);\n    let url;\n    if (issuerMetadata.jwks_uri) {\n        url = new URL(issuerMetadata.jwks_uri);\n    }\n    else {\n        url = new URL(issuer);\n        if (!url.pathname.endsWith('/')) {\n            url.pathname += '/';\n        }\n        url.pathname += '.well-known/jwks.json';\n    }\n    const response = await fetch(url.href);\n    if (!response.ok) {\n        throw new Error(`Error loading jwks at ${url.href}. ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n}\nconst importedKeys = {};\nexport async function importKey(iss, jwk) {\n    if (jwk.kty !== 'RSA') {\n        throw new Error(`Unsupported jwk key type (kty) \"${jwk.kty}\": Full JWK was ${JSON.stringify(jwk)}`);\n    }\n    const hash = jwk.alg ? algToHash[jwk.alg] : 'SHA-256';\n    if (!hash) {\n        throw new Error(`Unsupported jwk Algorithm (alg) \"${jwk.alg}\": Full JWK was ${JSON.stringify(jwk)}`);\n    }\n    const key = await crypto.subtle.importKey('jwk', jwk, { name: 'RSASSA-PKCS1-v1_5', hash }, false, ['verify']);\n    importedKeys[iss] = importedKeys[iss] || {};\n    importedKeys[iss][jwk.kid ?? 'default'] = key;\n}\nexport async function getKey(decoded) {\n    const { header: { kid = 'default' }, payload: { iss } } = decoded;\n    if (!importedKeys[iss]) {\n        const jwks = await getJwks(iss);\n        await Promise.all(jwks.keys.map(jwk => importKey(iss, jwk)));\n    }\n    const key = importedKeys[iss][kid];\n    if (!key) {\n        throw new Error(`Error jwk not found. iss: ${iss}; kid: ${kid};`);\n    }\n    return key;\n}\n", "export var InvalidJwtReasonCode;\n(function (InvalidJwtReasonCode) {\n    InvalidJwtReasonCode[InvalidJwtReasonCode[\"Other\"] = 0] = \"Other\";\n    InvalidJwtReasonCode[InvalidJwtReasonCode[\"Expired\"] = 1] = \"Expired\";\n})(InvalidJwtReasonCode || (InvalidJwtReasonCode = {}));\n", "export async function verifyJwtSignature(decoded, key) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(`${decoded.raw.header}.${decoded.raw.payload}`);\n    return crypto.subtle.verify('RSASSA-PKCS1-v1_5', key, decoded.signature, data);\n}\n", "import { algs, algToHash } from './algs.js';\nimport { decodeJwt } from './decode.js';\nimport { getKey } from './jwks.js';\nimport { InvalidJwtReasonCode } from './types.js';\nimport { verifyJwtSignature } from './verify.js';\nconst defaultSkewMs = 60 * 1000;\nexport async function parseJwt({ jwt, issuer, audience, resolveKey = getKey, skewMs = defaultSkewMs }) {\n    let decoded;\n    try {\n        decoded = decodeJwt(jwt);\n    }\n    catch {\n        return {\n            valid: false,\n            reason: `Unable to decode JWT.`,\n            reasonCode: InvalidJwtReasonCode.Other\n        };\n    }\n    const { typ, alg } = decoded.header;\n    if (typeof typ !== 'undefined' && typ !== 'JWT') {\n        return {\n            valid: false,\n            reason: `Invalid JWT type ${JSON.stringify(typ)}. Expected \"JWT\".`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (!algToHash[alg]) {\n        return {\n            valid: false,\n            reason: `Invalid JWT algorithm ${JSON.stringify(alg)}. Supported: ${algs}.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    const { sub, aud, iss, iat, exp, nbf } = decoded.payload;\n    if (typeof sub !== 'string') {\n        return {\n            valid: false,\n            reason: `Subject claim (sub) is required and must be a string. Received ${JSON.stringify(sub)}.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (typeof aud === 'string') {\n        if (aud !== audience) {\n            return {\n                valid: false,\n                reason: `Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Expected \"${audience}\".`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n    }\n    else if (Array.isArray(aud) &&\n        aud.length > 0 &&\n        aud.every(a => typeof a === 'string')) {\n        if (!aud.includes(audience)) {\n            return {\n                valid: false,\n                reason: `Invalid JWT audience claim array (aud) ${JSON.stringify(aud)}. Does not include \"${audience}\".`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n    }\n    else {\n        return {\n            valid: false,\n            reason: `Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Expected a string or a non-empty array of strings.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (!(iss === issuer || (Array.isArray(issuer) && issuer.includes(iss)))) {\n        return {\n            valid: false,\n            reason: `Invalid JWT issuer claim (iss) ${JSON.stringify(decoded.payload.iss)}. Expected ${JSON.stringify(issuer)}.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (typeof exp !== 'number') {\n        return {\n            valid: false,\n            reason: `Invalid JWT expiry date claim (exp) ${JSON.stringify(exp)}. Expected number.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    const currentDate = new Date(Date.now());\n    const expiryDate = new Date(0);\n    expiryDate.setUTCSeconds(exp);\n    const expired = expiryDate.getTime() <= currentDate.getTime() - skewMs;\n    if (expired) {\n        return {\n            valid: false,\n            reason: `JWT is expired. Expiry date: ${expiryDate}; Current date: ${currentDate};`,\n            reasonCode: InvalidJwtReasonCode.Expired,\n            decoded\n        };\n    }\n    if (nbf !== undefined) {\n        if (typeof nbf !== 'number') {\n            return {\n                valid: false,\n                reason: `Invalid JWT not before date claim (nbf) ${JSON.stringify(nbf)}. Expected number.`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n        const notBeforeDate = new Date(0);\n        notBeforeDate.setUTCSeconds(nbf);\n        const early = notBeforeDate.getTime() > currentDate.getTime() + skewMs;\n        if (early) {\n            return {\n                valid: false,\n                reason: `JWT cannot be used prior to not before date claim (nbf). Not before date: ${notBeforeDate}; Current date: ${currentDate};`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n    }\n    if (iat !== undefined) {\n        if (typeof iat !== 'number') {\n            return {\n                valid: false,\n                reason: `Invalid JWT issued at date claim (iat) ${JSON.stringify(iat)}. Expected number.`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n        const issuedAtDate = new Date(0);\n        issuedAtDate.setUTCSeconds(iat);\n        const postIssued = issuedAtDate.getTime() > currentDate.getTime() + skewMs;\n        if (postIssued) {\n            return {\n                valid: false,\n                reason: `JWT issued at date claim (iat) is in the future. Issued at date: ${issuedAtDate}; Current date: ${currentDate};`,\n                reasonCode: InvalidJwtReasonCode.Other,\n                decoded\n            };\n        }\n    }\n    let key;\n    try {\n        key = await resolveKey(decoded);\n    }\n    catch (e) {\n        return {\n            valid: false,\n            reason: `Error retrieving public key to verify JWT signature: ${e instanceof Error ? e.message : e}`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (!key) {\n        return {\n            valid: false,\n            reason: `Unable to resolve public key to verify JWT signature.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    let signatureValid;\n    try {\n        signatureValid = await verifyJwtSignature(decoded, key);\n    }\n    catch {\n        return {\n            valid: false,\n            reason: `Error verifying JWT signature.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    if (!signatureValid) {\n        return {\n            valid: false,\n            reason: `JWT signature is invalid.`,\n            reasonCode: InvalidJwtReasonCode.Other,\n            decoded\n        };\n    }\n    const { header, payload } = decoded;\n    return { valid: true, header, payload };\n}\n", "import { parseJwt } from \"@cfworker/jwt\";\nimport { Env } from \"../context-env\";\n\nasync function getToken(context, code: string, client_secret: string) {\n  return fetch(\n    context.env.VIM_TOKEN_ENDPOINT ?? \"https://api.getvim.com/v1/oauth/token\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        client_id: context.env.CLIENT_ID,\n        code,\n        client_secret,\n        grant_type: \"authorization_code\",\n      }),\n    }\n  );\n}\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n  const { code } = await context.request.json<{ code: string }>();\n  let vimResponse = await getToken(context, code, context.env.CLIENT_SECRET);\n  if (\n    vimResponse.status >= 400 &&\n    vimResponse.status < 500 &&\n    context.env.CLIENT_SECRET_FALLBACK\n  ) {\n    vimResponse = await getToken(\n      context,\n      code,\n      context.env.CLIENT_SECRET_FALLBACK\n    );\n  }\n  const tokenData = await vimResponse.json();\n  if (\n    !(await isAuthorized(\n      tokenData,\n      context.env.CLIENT_ID,\n      context.env.VIM_ISSUER\n    ))\n  ) {\n    return new Response(\"\", {\n      status: 403,\n      statusText: \"Forbidden: You do not have access to this resource.\",\n    });\n  }\n\n  return Response.json(tokenData);\n};\n\nasync function isAuthorized(\n  vimTokenData,\n  clientId: string,\n  vimIssuer = \"https://auth.getvim.com/\"\n) {\n  try {\n    const decodedIdToken = await parseJwt({\n      jwt: vimTokenData.id_token,\n      issuer: vimIssuer,\n      audience: clientId,\n    });\n    if (decodedIdToken.valid) {\n      // If identification data on token is not sufficient userinfo endpoint can be used...\n      return await isUserEligibleToMyApp({\n        email: decodedIdToken.payload[\"email\"],\n        vimUserId: decodedIdToken.payload[\"sub\"],\n      });\n    } else if (decodedIdToken.valid === false) {\n      console.error(\n        `Failed to parse jwt ${decodedIdToken.reason} [${decodedIdToken.reasonCode}]`,\n        {\n          vimTokenData,\n          vimIssuer,\n          clientId,\n        }\n      );\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Error verifying token\", error);\n    return false;\n  }\n}\n\nasync function isUserEligibleToMyApp({ email, vimUserId }) {\n  console.info(`User ${email}, ${vimUserId} is eligible to my app.`);\n  return true;\n}\n", "import { onRequestGet as __api_launch_ts_onRequestGet } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/functions/api/launch.ts\"\nimport { onRequestGet as __api_settings_ts_onRequestGet } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/functions/api/settings.ts\"\nimport { onRequestPost as __api_settings_ts_onRequestPost } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/functions/api/settings.ts\"\nimport { onRequestPost as __api_token_ts_onRequestPost } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/functions/api/token.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/launch\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_launch_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/settings\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/settings\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_settings_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/token\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_token_ts_onRequestPost],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/node_modules/wrangler/templates/pages-template-worker.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/.wrangler/tmp/bundle-lU2oaZ/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/.wrangler/tmp/bundle-lU2oaZ/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/ryanhoffman/projects/vim-canvas-demo-app/vim-canvas-demo-app-angular/.wrangler/tmp/bundle-lU2oaZ/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["onRequestGet", "InvalidJwtReasonCode", "onRequestPost", "onRequestGet", "onRequestPost", "parse", "value", "_a", "result", "char", "prefix", "i", "parse"]
}
